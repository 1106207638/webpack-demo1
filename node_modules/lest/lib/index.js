/* @flow */

'use strict';

import path from 'path'
import commander from 'commander'
import jsonr from 'json-realtime'
import shell from 'shelljs'

const resolver = (dir: string): string => {
  return path.resolve(__dirname, '..', dir)
}

const pkgJSON: Object = jsonr(resolver('package.json'))
const config: Config$Object = jsonr(resolver('config.json'))
const runnerList = ['npm', 'yarn']

commander
  .version(pkgJSON.version)
  .usage('<options>')
  .option('-r, --runner [value]', 'Change runner<npm, yarn>. default: npm')
  .option('-t, --task [value]', 'Change test task<string>. default: test')
  .parse(process.argv)

const onArgs = commander.args.length > 0

const taskExecutor = (cmd: string): void => {
  shell.exec('npm run test')
}

if (onArgs) {
  if (commander.runner) {
    if (runnerList.indexOf(commander.runner) > -1) {
      config.runner = commander.runner
      console.log('Successfull set default runner to', config.runner)
    } else {
      console.log(`Runner ${ commander.runner } for now not support yet.`)
    }
  }

  if (commander.task) {
    config.task = commander.task
    console.log('Successfull set default test task to', config.task)
  }
} else {
  switch(config.runner) {
    case 'npm':
      taskExecutor(`npm run ${ config.task }`)
      break
    case 'yarn':
      taskExecutor(`yarn ${ config.task }`)
      break
    default:
      break
  }
}